// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Data.Migrations
{
    [DbContext(typeof(FlightSystemContext))]
    [Migration("20240403171952_add_numOfSeats")]
    partial class add_numOfSeats
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Backend.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Name = "Beograd"
                        },
                        new
                        {
                            CityId = 2,
                            Name = "Niš"
                        },
                        new
                        {
                            CityId = 3,
                            Name = "Kraljevo"
                        },
                        new
                        {
                            CityId = 4,
                            Name = "Priština"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArrivalCityID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvailableSeatsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartureCityID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfConnections")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlightId");

                    b.HasIndex("AgentID");

                    b.HasIndex("ArrivalCityID");

                    b.HasIndex("DepartureCityID");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Backend.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("numOfSeats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("timeSubmited")
                        .HasColumnType("TEXT");

                    b.HasKey("ReservationId");

                    b.HasIndex("BookerId");

                    b.HasIndex("FlightId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Backend.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "admin",
                            Role = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "agent",
                            Role = "agent",
                            Username = "agent"
                        },
                        new
                        {
                            UserId = 3,
                            Password = "visitor",
                            Role = "visitor",
                            Username = "visitor"
                        },
                        new
                        {
                            UserId = 4,
                            Password = "agent1",
                            Role = "agent",
                            Username = "agent1"
                        },
                        new
                        {
                            UserId = 5,
                            Password = "agent2",
                            Role = "agent",
                            Username = "agent2"
                        },
                        new
                        {
                            UserId = 6,
                            Password = "visitor1",
                            Role = "visitor",
                            Username = "visitor1"
                        },
                        new
                        {
                            UserId = 7,
                            Password = "visitor2",
                            Role = "visitor",
                            Username = "visitor2"
                        },
                        new
                        {
                            UserId = 8,
                            Password = "visitor3",
                            Role = "visitor",
                            Username = "visitor3"
                        },
                        new
                        {
                            UserId = 9,
                            Password = "visitor4",
                            Role = "visitor",
                            Username = "visitor4"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Flight", b =>
                {
                    b.HasOne("Backend.Entities.User", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.City", "ArrivalCity")
                        .WithMany()
                        .HasForeignKey("ArrivalCityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.City", "DepartureCity")
                        .WithMany()
                        .HasForeignKey("DepartureCityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("ArrivalCity");

                    b.Navigation("DepartureCity");
                });

            modelBuilder.Entity("Backend.Entities.Reservation", b =>
                {
                    b.HasOne("Backend.Entities.User", "Booker")
                        .WithMany()
                        .HasForeignKey("BookerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booker");

                    b.Navigation("Flight");
                });
#pragma warning restore 612, 618
        }
    }
}
